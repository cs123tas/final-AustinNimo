Implement Leaf Creation
	Shape
	Color
	Vertices
Implement Trunk Creation
	Using Cylinder?
	Color
	Vertices

Update Generator::processXRule
Currently processFwdRule supports format (float, float, float) for distance, radius, length
	want to allow using the saved variable and also division, mult, addition, substraction, random numbers, sin, cos.
processRotRule supports format (float, float, float) angle of rotation
	want to allow using the saved variable and also division, mult, addition, substraction, random numbers, sin, cos.
processLeafRule supports format (float, float, float, float, float, float, float) for length, width, thickness, r, g, b, a
	want to allow using the saved variable and also division, mult, addition, substraction, random numbers, sin, cos.
processPredRule supports format (string) for which variable to use, currently inactive since nothing supports dividing.
	want to allow updating the variable for the next layer
	
	
vec(float vecX, float vecY, float vecZ, float vecPercent from 0 to 1 of how much to move towards this vector
new vector is normalize(vecPercent * vec + ((1 - vecPercent) * currentVec))

random(float startNumber: float endNumber)
Returns a random value between the two numbers
Note the middle is a colon
The axiom MUST be named L.
	
Example:
L(g)->
  fwd(5.0, 1.0)
  rot(1.0, 2.0, 1.0)
  L(g)
  rot(-1.0, -2.0, -1.0)
  fwd(5.0, 1.0)
  leaf(1.5, 0.1, 0.9, 0.1, 1.0);
  
Next work to do: work on brackets and then + - * / and then variables and then randomization


Load Phong Shader in and paint each of the cylinders being made.

RRTC*
Perception and capabilitty
situational awareness



Break down until innermost parenthesis, then get a value, then replace it in the string and repeat

L(g)->
  fwd(  0.0, 0.95, 0.2)
  fwd(  0.0, 0.95, 0.2)
  fwd(  0.0, 0.95, 0.2)
  fwd(  0.0, 0.95, 0.2)
  fwd(  0.0, 0.95, 0.2)
  fwd(  0.0, 0.95, 0.2)
  fwd(  0.0, 0.95, 0.2)
  fwd(  0.0, 0.95, 0.2)
  fwd(  0.0, 0.95, 0.2)
  L(g+1)
  This cr
  
  
  Remaining work:
  Top of file globals
  A few more tree models

Leaf colors:
Leaf Green
  leaf(1.0, 1.0, 1.0, 0.227, 0.372, 0.043, 1.0)
Autumn Red-Orange
  leaf(1.0, 1.0, 1.0, 0.5961, 0.2824, 0.1686, 1.0)
Autumn Yellow
  leaf(1.0, 1.0, 1.0, 0.933, 0.815, 0.007, 1.0)
Autumn Brown
  leaf(1.0, 1.0, 1.0, 0.588, 0.207, 0.078, 1.0)
Cherry Blossom Pink
  leaf(1.0, 1.0, 1.0, 1.0, 0.718, 0.773, 1.0)
Scarlet Maple
  leaf(1.0, 1.0, 1.0, 0.694, 0.133, 0.180, 1.0)

  
Goals:
Stumbling Blocks:
Split up who did what

Tree Designs I want to make
Pine
Oak	Summer/Fall/Winter
Scarlet Maple
Sakura

  How it should work:
  Maintain current starting location, vector angle facing, radius/
  On rotate: Rotate current vector angle facing
  On leaf: draw a leaf TBD
  On forward: draw at current location by applying current scaling, ten rotationg, then translating, change current location by moving the length in the direction of angle facing
  
  
  
  
  
  
  
  
  
  
  
  
  
The five files that look good are in the l-systems folder. You can load a group of them into the scene by using mainwindow.generateTrees.

First you create a std::vector<glm::vec3> of XYZ locations for the base of the trunk. This should look like {{1.0, 0.5, 1.0}} for example, to make one tree at 1, .5, 1. Remember that y is up.

Next is a std::vector<glm::vec3> for the angle that should be the tree's up direction. For example {{0.0,1.0,0.0}} would be one tree pointed the normal direction. These two must have the same amount of vec3s, because that will be how many of the randomly generated tree are placed in the scene.

Finally should be one glm::vec3 of dimensions for the tree. For example {0.1,0.1,0.1} would be a tree shrunk to .1 of its normal size. I find that .1 is about right for the sample terrain currently used.

Then you call generateTrees(QString(":/l-systems/l-systems/OakFall.txt"), locationVec, angleVec, sizeVec);
Note the QString, this points to the resource file. You can replace OakFall with any of the 5 trees.

The only stuff remaining is your piece, the terrain and the camera movement if you get to it. The lab terrain is currently in terrain.cpp. Please have it in a presentable state by 9 so we can put together the final video. Thanks!